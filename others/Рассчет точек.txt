function Dialogv5fe97e5c30cef() {var me = this;me.id = "dialogv5fe97e5c30cef";me.GetElement = function () { return document.getElementById( me.id ); };me.GetEventHandlerName = function () { return "dialoghandlerv5fe97e5c30cef"; };this.dialog_controls = [new DialogInput("la1", this, new ValidatorRange( -90, 90),new ElementAccessorCoordinate()),new DialogInput("lo1", this, new ValidatorRange( -180, 180),new ElementAccessorCoordinate()),new DialogInput("la2", this, new ValidatorRange( -90, 90),new ElementAccessorCoordinate()),new DialogInput("lo2", this, new ValidatorRange( -180, 180),new ElementAccessorCoordinate()),new DialogInput("ellipsoid", this, 0,new ElementAccessorRadio()),new DialogInput("precisionmeter", this, 0,new ElementAccessorPrecision(2)),new DialogInput("calculate", this, 0,new ElementAccessorOperation()),new DialogInput("_progress_", this, 0,new ElementAccessorDefault()),new DialogInput("", this, 0,new ElementAccessorDefault()),new DialogInput("alpha1", this, 0,new ElementAccessorOutput()),new DialogInput("alpha2", this, 0,new ElementAccessorOutput()),new DialogInput("distanceM", this, 0,new ElementAccessorOutput()),new DialogInput("distanceNMI", this, 0,new ElementAccessorOutput()),new DialogInput("pointsCount", this, new ValidatorNumber( false, false),new ElementAccessorNumber(),new ValidatorNumber( false, false)),new DialogInput("distancePointsM", this, 0,new ElementAccessorOutput()),new DialogInput("distancePointsNMI", this, 0,new ElementAccessorOutput()),new DialogInput("waypoints", this, 0,new ElementAccessorDefault())];me.dialog_controls._all ={};me.dialog_controls.forEach( function( e ) { if (me[e.id]===undefined) me[e.id] = e; me.dialog_controls._all[e.id] = e;} );this.addHandler = function ( handler ) {this.dialog_controls.forEach(function(c) { c.addHandler( handler);});};this.SetValues = function ( values ) {this.dialog_controls.forEach(function(c) {if ( values[c.id]!==undefined ) { c.SetValue( values[c.id] ); }});};this.Clear = function ( ) {this.dialog_controls.forEach(function( c) { c.ResetValue();});};this.SetDefaultValues = function () { this.Clear();};this.GetValues = function () {var ret = {}; this.dialog_controls.forEach(function( c) { ret[c.id] = c.GetValue();});return ret;};this.Validate = function ( ) {for(var i=0;i<me.dialog_controls.length;++i) if (!me.dialog_controls[i].Validate()) return false; return true;};this.layout = function ( ) {me.dialog_controls[5].elementAccessor.layout();}};document.addEventListener("DOMContentLoaded", function(event) {var dlg = new Dialogv5fe97e5c30cef();
var hd = new CalculatorHandler(new function () {
var me = this;
me.id = 717;
me.global = 1;
var outputs = {};
me.sinks={change:[],done:[]};
me.startOnLoad = 1;
me.infinite = 0;
var inputs = {};
var renderers = {};
var recordsets = {};
var diagrams = {};
var handler, dialog, refreshTimer;
var worker; var proxies; var stubs;
var outer = this;
var Planetcalc = new function() { 
var inner = this; var Planetcalc = inner; var cpcData = new CalcProgressData();var Calculate717_cpc = new CalcProgressControl(cpcData);inner.Calculate717 = function( ___inp___ ) {
var progressControl = Calculate717_cpc;
var Calculate717_result={};
var waypoints = new Recordset("","__id__");function  __impl__( __inp__ ) {

var pointsCount = __inp__["pointsCount"]===undefined?20:__inp__["pointsCount"];
var ellipsoid = __inp__["ellipsoid"]===undefined?"wgs84":__inp__["ellipsoid"];
var lo2 = __inp__["lo2"]===undefined?-59.6083333333:__inp__["lo2"];
var la2 = __inp__["la2"]===undefined?13.0961111111:__inp__["la2"];
var lo1 = __inp__["lo1"]===undefined?-15.4313888889:__inp__["lo1"];
var la1 = __inp__["la1"]===undefined?28.1272222222:__inp__["la1"];
var alpha1 = { "SetValue": function( v ) { Calculate717_result["alpha1"]=v; } };
var alpha2 = { "SetValue": function( v ) { Calculate717_result["alpha2"]=v; } };
var distancePointsM = { "SetValue": function( v ) { Calculate717_result["distancePointsM"]=v; } };
var distancePointsNMI = { "SetValue": function( v ) { Calculate717_result["distancePointsNMI"]=v; } };
var distanceM = { "SetValue": function( v ) { Calculate717_result["distanceM"]=v; } };
var distanceNMI = { "SetValue": function( v ) { Calculate717_result["distanceNMI"]=v; } };function rad( a ) {
	return Math.PI*a/180;
}
function grad( a ) {
	return 180*a/Math.PI;
}
function grad360( a ) {
	return a>=0?grad(a):grad(a+2*Math.PI);
}

var ellipsoids = { "wgs84" : { "min":6356752.314, "max":6378137 }, "sk42" : { "min":6356863, "max":6378245 }, "sphere" : { "min":6378137, "max":6378137 } };

var geoid = ellipsoids[ellipsoid];
var f = (geoid.max-geoid.min)/geoid.max;
var f_16=f/16;
var b2 = geoid.min*geoid.min;
var e_inv = (geoid.max*geoid.max-b2)/b2;

var minDelta = 0.000000000000000001;

function VincentyInverse( la1,la2,lo1,lo2 ) {
var U1 = Math.atan((1-f)*Math.tan(rad(la1)) );
var U2 = Math.atan((1-f)*Math.tan(rad(la2)));
var sinU1 = Math.sin(U1);
var sinU2 = Math.sin(U2);
var cosU1 = Math.cos(U1);
var cosU2 = Math.cos(U2);
var L = rad(lo2-lo1);
var lambda = L;
var dLambda = 0;
while(true) {
	var sinLambda = Math.sin(lambda);
	var cosLambda = Math.cos(lambda);
	var sin2Sigma = Math.pow(cosU2*sinLambda,2)+Math.pow(cosU1*sinU2-sinU1*cosU2*cosLambda,2);
	var sinSigma = Math.sqrt(sin2Sigma);
	var cosSigma = sinU1*sinU2+cosU1*cosU2*cosLambda;
	var sigma = Math.atan2(sinSigma,cosSigma);
	var sinAlpha = sinSigma?cosU1*cosU2*sinLambda/sinSigma:0;
	var cos2a = 1-sinAlpha*sinAlpha;
	var cos2SigmaM = cos2a?cosSigma - 2*sinU1*sinU2/cos2a:0;
	var C = f_16*cos2a*(4+f*(4-3*cos2a));
	var oldLambda = lambda;
	var cos2SigmaM2 = cos2SigmaM*cos2SigmaM;
	lambda = L+(1-C)*f*sinAlpha*(sigma+C*sinSigma*(cos2SigmaM+C*cosSigma*(-1+2*cos2SigmaM2)));
	dLambda = lambda-oldLambda;
	if ( Math.abs(dLambda)<=minDelta ) {	
		var u2 = cos2a*e_inv;
		var A =1+ (u2/16384)*(4096+u2*(-768+u2*(320-175*u2)));
		var B =(u2/1024)*(256+u2*(-128+u2*(74-47*u2)));
var dSigma = B*sinSigma*(cos2SigmaM+(B/4)*(cosSigma*(-1+2*cos2SigmaM2)-(B/6)*cos2SigmaM*(-3+4*sin2Sigma)*(-3+4*cos2SigmaM2)));
		var s = geoid.min*A*(sigma-dSigma);
		var cosLambda = Math.cos(lambda);
		var sinLambda = Math.sin(lambda);
		var angle1 = Math.atan2( cosU2*sinLambda,cosU1*sinU2-sinU1*cosU2*cosLambda);
		var angle2 = Math.atan2( cosU1*sinLambda,-sinU1*cosU2 + cosU1*sinU2*cosLambda);
		return {"s":s, "a1":angle1,"a2":angle2};
	}
}
}




function Vincenty( la1,lo1,a1,s ) {
var U1 = Math.atan((1-f)*Math.tan(rad(la1)));
var sinU1 = Math.sin(U1);
var cosU1 = Math.cos(U1);
var sinAlpha = cosU1*Math.sin(a1);
var sinAlpha2 = sinAlpha*sinAlpha;
var cosAlpha2 = 1-sinAlpha2;
var u_2 = cosAlpha2*e_inv;
var A = 1+u_2/16384*(4096+u_2*(-768+u_2*(320-175*u_2)));
var B = u_2/1024*(256+u_2*(-128+u_2*(74-47*u_2)));
var sigma = s/(geoid.min*A);
var sigmaBase = sigma;
var cosa1 = Math.cos(a1);
var sina1 = Math.sin(a1);
var sigma1 = Math.atan2(Math.tan(U1),cosa1);
while(true) {
	var twoSigmaM = 2*sigma1+sigma;
	var cos2SigmaM = Math.cos(twoSigmaM);
	var cos2SigmaM2 = cos2SigmaM*cos2SigmaM;
	var sinSigma = Math.sin(sigma);
	var cosSigma = Math.cos(sigma);
	var deltaSigma = B*sinSigma*( cos2SigmaM+1/4*B*(cosSigma*(-1+2*cos2SigmaM2)-1/6*B*cos2SigmaM*(-3+4*sinSigma*sinSigma)*(-3+4*cos2SigmaM2) ) );
	var oldSigma = sigma;
	sigma = sigmaBase+deltaSigma;
	var dSigma = Math.abs(sigma-oldSigma);
	if ( dSigma<minDelta) {
		var res = {};
		res.la = grad(Math.atan2( sinU1*cosSigma+cosU1*sinSigma*cosa1,(1-f)*Math.sqrt(sinAlpha2+Math.pow((sinU1*sinSigma-cosU1*cosSigma*cosa1),2)) ));
		var lambda = Math.atan2( sinSigma*sina1,cosU1*cosSigma-sinU1*sinSigma*cosa1);
		var C = f_16 * cosAlpha2 * (4 + f * (4 - 3 * cosAlpha2));
		var L = lambda-(1-C)*f*sinAlpha*(sigma +C*sinSigma*(cos2SigmaM+C*cosSigma*(-1+ 2*cos2SigmaM2)));
		res.lo = lo1 + grad(L);
		if ( res.lo>180 ) { 
		    res.lo = -360+res.lo;
		} else if ( res.lo<-180 ) {
		    res.lo = 360+res.lo;
		}
		res.angle = Math.atan2(sinAlpha, -sinU1 * sinSigma + cosU1 * cosSigma * cosa1);
		return res;
	}
}
}

var res = VincentyInverse( la1,la2,lo1,lo2 );
distanceM.SetValue(res.s/1000);
distanceNMI.SetValue(res.s/1852);
alpha1.SetValue( grad360(res.a1) );
alpha2.SetValue( grad360(res.a2) );

res.angle = res.a1;
res.la = la1;
res.lo = lo1;

var distance = res.s/(pointsCount-1);
distancePointsM.SetValue( distance/1000 );
distancePointsNMI.SetValue( distance/1852 );
for(var i=0;i<pointsCount-1;++i) {
	var row = waypoints.AddNewRecord();
	row.la = res.la;
	row.lo = res.lo;
	row.angle = grad360(res.angle);
	res = Vincenty( res.la,res.lo,res.angle,distance);
}
var row = waypoints.AddNewRecord();
row.la = la2;
row.lo = lo2;
row.angle=0;

};
 __impl__(___inp___);
Calculate717_result["waypoints"] = waypoints.GetRecordArray(); if ( progressControl.completed() ) { progressControl.context = null; } return Calculate717_result;};inner.main=inner.Calculate717;inner.progressControl = Calculate717_cpc; inner.init = function(){inner.progressControl.onDataReady();};};me.adapter = null;function startLoad() {
me.progressControl.addEventListener("ready",handler.onReady);
Planetcalc.init(); }
me.timeout = 1500;
me.auto = 0;
me.init = function ( h, dlg ) { var o; handler=h;dialog =dlg;me.progressControl = Planetcalc.progressControl;var n; var fn;n='pointsCount';if ( dlg[n] ) { inputs[n] = dlg[n]; }n='ellipsoid';if ( dlg[n] ) { inputs[n] = dlg[n]; }n='lo2';if ( dlg[n] ) { inputs[n] = dlg[n]; }n='la2';if ( dlg[n] ) { inputs[n] = dlg[n]; }n='lo1';if ( dlg[n] ) { inputs[n] = dlg[n]; }n='la1';if ( dlg[n] ) { inputs[n] = dlg[n]; }o = dlg.alpha1;outputs[o.id] =o;o.formatter =new FormatterNumber( 2,0,0,"R" );o = dlg.alpha2;outputs[o.id] =o;o.formatter =new FormatterNumber( 2,0,0,"R" );o = dlg.distancePointsM;outputs[o.id] =o;o.formatter =new FormatterNumber( 2,0,0,"R" );o = dlg.distancePointsNMI;outputs[o.id] =o;o.formatter =new FormatterNumber( 2,0,0,"R" );o = dlg.distanceM;outputs[o.id] =o;o.formatter =new FormatterNumber( 2,0,0,"R" );o = dlg.distanceNMI;outputs[o.id] =o;o.formatter =new FormatterNumber( 2,0,0,"R" );n='waypoints';fn='dialogv5fe97e5c30cef_waypoints';recordsets[n] = new Recordset("","__id__");renderers[n]= new RecordsetRendererC(fn,10,["export"]);
 renderers[n].name = "Путевые точки";renderers[n].AddColumn("la", "Широта", new RecordFieldFormatter(new FormatterCoordinate('lat',0)), '', 0,'cardinal',11);
renderers[n].AddColumn("lo", "Долгота", new RecordFieldFormatter(new FormatterCoordinate('lon',0)), '', 0,'cardinal',12);
renderers[n].AddColumn("angle", "Путевой угол", new RecordFieldFormatter(new FormatterNumber( 2,0,0,"R" )), '', 0,'cardinal',1);
startLoad();};
me.stop = function() {
	if (worker) worker.postMessage({type:"stop"}); 
	else Planetcalc.progressControl.stop();
};
me.start = function() {
	handler.onStart();
	if (worker) {
		me.changeDisplayOptions();
		worker.postMessage({type:"start",inputs:proxies(dialog.GetValues())});
	} else {
inputValues = {"pointsCount":Number(inputs.pointsCount.GetValue()), "ellipsoid":inputs.ellipsoid.GetValue(), "lo2":inputs.lo2.GetValue(), "la2":inputs.la2.GetValue(), "lo1":inputs.lo1.GetValue(), "la1":inputs.la1.GetValue()};	Planetcalc.progressControl.clear();
		me.result = null;
		me.refresh();
	}
};me.getInputs = function() {
	return inputs;
};
function objectValues( a, o ) {
	for(var n in o) {
		a.push( o[n] );
	}
}
me.getOutputs = function() {
	var ret = [];
	objectValues( ret, outputs );
	objectValues( ret, diagrams );
	objectValues( ret, renderers );
	return ret;
};me.refresh = function ( ) {me.doit();};
me.setResult = function( res, done ) {recordsets.waypoints.Clear();recordsets.waypoints.LoadFromArray( res.waypoints);if (renderers.waypoints) {renderers.waypoints.Render( recordsets.waypoints);} if ( diagrams.waypoints) { diagrams.waypoints.Render(res.waypoints ); }outputs.alpha1.SetValue(res.alpha1);outputs.alpha2.SetValue(res.alpha2);outputs.distancePointsM.SetValue(res.distancePointsM);outputs.distancePointsNMI.SetValue(res.distancePointsNMI);outputs.distanceM.SetValue(res.distanceM);outputs.distanceNMI.SetValue(res.distanceNMI);if (done) { handler.onStop();if ( PCF.requestFormulaUpdate( false ) ) { var mjx = window.MathJax; mjx.Hub.Queue(["Typeset",mjx.Hub]);};}};
function preprocess( p, cb ) {cb(p,true);}var inputValues = null;me.doit = function ( ) {preprocess(inputValues, function( p, sync, cont ) {if ( cont ) me.progressControl.repeat();try {me.changeDisplayOptions();
var res = Planetcalc.Calculate717(p);if ( res ) { if ( me.result ) { for( var n in res ) me.result[n] = res[n]; } else me.result = res; }if ( me.result ) me.setResult( me.result, true );} catch( e ) {
	handler.onStop(e);
}});};me.changeDisplayOptions = function () {me.calculateDisplay(new DisplayWrapperInput(inputs.pointsCount), new DisplayWrapperInput(inputs.ellipsoid), new DisplayWrapperInput(inputs.lo2), new DisplayWrapperInput(inputs.la2), new DisplayWrapperInput(inputs.lo1), new DisplayWrapperInput(inputs.la1), new DisplayWrapper(outputs.alpha1), new DisplayWrapper(outputs.alpha2), new DisplayWrapper(outputs.distancePointsM), new DisplayWrapper(outputs.distancePointsNMI), new DisplayWrapper(outputs.distanceM), new DisplayWrapper(outputs.distanceNMI), new DisplayWrapperTable( renderers.waypoints,null,diagrams.waypoints));dialog.layout();
}
me.calculateDisplay = function ( pointsCount, ellipsoid, lo2, la2, lo1, la1, alpha1, alpha2, distancePointsM, distancePointsNMI, distanceM, distanceNMI, waypoints )
 {if ( renderers.waypoints) renderers.waypoints.Header.RestoreColumns();
if ( diagrams.waypoints) diagrams.waypoints.Header.RestoreColumns();

};
},{calculate:"Рассчитать", stop:"Остановить"});;
hd.initdialog(dlg);dlg.addHandler(hd);window.dialoghandlerv5fe97e5c30cef = hd;});